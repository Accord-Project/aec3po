@prefix aec3po: <https://w3id.org/lbd/aec3po/> .
@prefix cc: <http://creativecommons.org/ns#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#> .
@prefix eli: <http://data.europa.eu/eli/ontology#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix quantitykind: <http://qudt.org/vocab/quantitykind/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ifcOWL: <https://standards.buildingsmart.org/IFC/DEV/IFC4/ADD2/OWL/index.html> .

# Instantiate the POUM Document as a Document
<POUM_Doc> a aec3po:Document ;
    dct:identifier <https://www.ajmalgrat.cat/informacio-oficial/urbanisme-i-obra-publica/poum> ;
    dct:issued "2005-07-13"^^xsd:date ;
    dct:references <reference_here> ;
    dct:coverage aec3po:Spain .

# Instantiate the first DocumentSubdivision that contains the rule to be checked
<POUM_DocSubdivision_Part2_CH1_S2> a aec3po:DocumentSubdivision ;
    dct:title "Part2_CH1_S2" .

# Instantiate the second DocumentSubdivision that contains the rule to be checked
<POUM_DocSubdivision_Part2_CH2_S2> a aec3po:DocumentSubdivision ;
    dct:title "Part2_CH2_S2" .

# Link the DocumentSubdivision to the Document using hasPart property
<POUM_Doc> dct:hasPart ( <POUM_DocSubdivision_Part2_CH1_S2> <POUM_DocSubdivision_Part2_CH2_S2> ). 

# Instantiate the first statement
<statement_54> a aec3po:Statement ;
    dct:title "54.8" ;
    aec3po:asText "The minimum free height of cantilevers over public spaces will be 3.20 metres for street with a width of 8.00 metres or less and 3.50 metres in all other cases." .

# Link the first statements to the DocumentSubdivision using hasPart property
<POUM_DocSubdivision_Part2_CH1_S2> dct:hasPart  <statement_54> .

# Instantiate the second statement
<statement_63> a aec3po:Statement ;
    dct:title "63.3" ;
    aec3po:asText "All cantilever must be separated by at least 1 meter from the line of the partywall." .   

# Link the second statement to the DocumentSubdivision using hasPart property
<POUM_DocSubdivision_Part2_CH2_S2> dct:hasPart  <statement_63>  .     

# Instantiate the ChecklistStatement as a subClassOf Statement
<cantilever_checklist> a aec3po:ChecklistStatement ;
    rdf:type aec3po:Statement .

# Instantiate the streetBaseOffset NumericalCheckStatement as a subClassOf CheckStatement
<cantiliver_numericalCheckStatement_streetBaseOffset> rdf:type aec3po:NumericalCheckStatement .  

# Instantiate the otherBaseOffset NumericalCheckStatement as a subClassOf CheckStatement
<cantiliver_numericalCheckStatement_otherBaseOffset> rdf:type aec3po:NumericalCheckStatement .

# Instantiate the partywall distance NumericalCheckStatement as a subClassOf CheckStatement
<cantiliver_numericalCheckStatement_partywall_distance> rdf:type aec3po:NumericalCheckStatement .
   

#--------End of document and statement description and their classification

#-------Required Data informed by the Statement

# Instantiate the cantilever as a FeatureOfInterest
<cantilever> a aec3po:FeatureOfInterest .

# Define the properties of the cantilever and constraints based on the Statement
<streeBaseOffset> a aec3po:Property ;
    aec3po:hasValue 3.2 ;
    aec3po:hasQuantityKind <M> ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-eg .

# Define a quantity kind meter 
<M> a aec3po:QuantityKind .

<othersBaseOffset> a aec3po:Property ;
    aec3po:hasValue 3.5 ;
    aec3po:hasQuantityKind <M> ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-eg .

<partywall_distance> a aec3po:Property ;
    aec3po:hasValue 1 ;
    aec3po:hasQuantityKind <M> ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-ge .

<statement_54> aec3po:hasRequiredData <streeBaseOffset> .
<statement_54> aec3po:hasRequiredData <othersBaseOffset> .
<statement_63> aec3po:hasRequiredData <partywall_distance> .


# Define and Instantiate all the CheckMethod(s) that will operationalize the Statement defined earlier. 

<cantiliver_numericalCheckMethod_streetBaseOffset> rdf:type aec3po:ProcedurialCheck ;
  aec3po:operationalizes <cantiliver_numericalCheckStatement_streetBaseOffset> .
  #asText "The minimum free height of cantilevers over public spaces will be 3.20 metres for street with a width of 8.00 metres or less" ;

<cantiliver_numericalCheckMethod_otherBaseOffset>  rdf:type aec3po:ProcedurialCheck ;
aec3po:operationalizes <cantiliver_numericalCheckStatement_otherBaseOffset> .
    #asText "3.50 metres in all other cases." 

<cantiliver_numericalCheckMethod_partywall_distance>  rdf:type aec3po:ProcedurialCheck ;
 aec3po:operationalizes  <cantiliver_numericalCheckStatement_partywall_distance> .
#asText "All cantilever must be separated by at least 1 meter from the line of the partywall." 

# Comment for Amna: Perhaps we need an AND or OR at the beginning of this list of checks?

# Start describing the "real" Canteliever from the Spanic Demo Case 

# Define the design of the properties of the cantilever
<design_streeBaseOffset> a aec3po:PropertyDesign ;
    aec3po:hasValue 4.5 ;
    aec3po:hasQuantityKind <M> .
# I am assuming this represents 2 in the image.
   
<design_othersBaseOffset> a aec3po:PropertyDesign ;
    aec3po:hasValue 2.6 ;
    aec3po:hasQuantityKind <M> .
#I am assuming this represents 1 in the image.
   
<design_partywall_distance> a aec3po:PropertyDesign ;
    aec3po:hasValue 1 ;
    aec3po:hasQuantityKind <M> .


# Conduct the checking act and generate a conformance report. 

