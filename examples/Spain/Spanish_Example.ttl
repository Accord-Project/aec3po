@prefix aec3po: <https://w3id.org/lbd/aec3po/> .
@prefix cc: <http://creativecommons.org/ns#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#> .
@prefix eli: <http://data.europa.eu/eli/ontology#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix quantitykind: <http://qudt.org/vocab/quantitykind/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ifcOWL: <https://standards.buildingsmart.org/IFC/DEV/IFC4/ADD2/OWL/index.html> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
PREFIX ex: <http://example.com/exampleOntology#>

# Instantiate the POUM Document as a Document
ex:POUM_Doc a aec3po:Document ;
    dct:identifier <https://www.ajmalgrat.cat/informacio-oficial/urbanisme-i-obra-publica/poum> ;
    dct:issued "2005-07-13"^^xsd:date ;
    dct:references <reference_here> ;
    dct:coverage aec3po:Spain .

# Instantiate the first DocumentSubdivision that contains the rule to be checked
ex:POUM_DocSubdivision_Part2_CH1_S2 a aec3po:DocumentSubdivision ;
    dct:identifier "POUM/Part_2/Chapter_1/Section_2" ;
    dct:title "Part2_CH1_S2" .

# Instantiate the second DocumentSubdivision that contains the rule to be checked
ex:POUM_DocSubdivision_Part2_CH2_S2 a aec3po:DocumentSubdivision ;
    dct:identifier "POUM/Part_2/Chapter_2/Section_2" ;
    dct:title "Part2_CH2_S2" .

# Link the DocumentSubdivision to the Document using hasPart property
ex:POUM_Doc dct:hasPart  ex:POUM_DocSubdivision_Part2_CH1_S2 , ex:POUM_DocSubdivision_Part2_CH2_S2 . 

# Instantiate the first statement
ex:statement_54 a aec3po:Statement ;
    dct:identifier "POUM/Part_2/Chapter_1/Section_2/Clause_54.8" ;
    dct:title "54.8" ;
    aec3po:asText "The minimum free height of cantilevers over public spaces will be 3.20 metres for street with a width of 8.00 metres or less and 3.50 metres in all other cases." .

# Link the first statements to the DocumentSubdivision using hasPart property
ex:POUM_DocSubdivision_Part2_CH1_S2 dct:hasPart  ex:statement_54 .

# Instantiate the second statement
ex:statement_63 a aec3po:Statement ;
    dct:identifier "POUM/Part_2/Chapter_1/Section_2/Clause_63.3" ;
    dct:title "63.3" ;
    aec3po:asText "All cantilever must be separated by at least 1 meter from the line of the partywall." .   

# Link the second statement to the DocumentSubdivision using hasPart property
ex:POUM_DocSubdivision_Part2_CH2_S2 dct:hasPart  ex:statement_63  .     

# Instantiate the ChecklistStatement as a subClassOf Statement
ex:cantilever_checklist a aec3po:ChecklistStatement ;
    rdf:type aec3po:Statement .

# Instantiate the streetBaseOffset NumericalCheckStatement as a subClassOf CheckStatement
ex:cantiliver_numericalCheckStatement_streetBaseOffset rdf:type aec3po:NumericalCheckStatement .  

# Instantiate the otherBaseOffset NumericalCheckStatement as a subClassOf CheckStatement
ex:cantiliver_numericalCheckStatement_otherBaseOffset rdf:type aec3po:NumericalCheckStatement .

# Instantiate the partywall distance NumericalCheckStatement as a subClassOf CheckStatement
ex:cantiliver_numericalCheckStatement_partywall_distance rdf:type aec3po:NumericalCheckStatement .
   

#--------End of document and statement description and their classification

#-------Required Data informed by the Statement

# Instantiate the cantilever as a FeatureOfInterest and link it to ifcSlab. NOTE: the equivalence relied to the IFC file provided with the example
ex:cantilever a aec3po:FeatureOfInterest ;
    rdf:type ifcOWL:ifcSlab .

# Define the properties of the cantilever and constraints based on the Statement
ex:streeBaseOffset a aec3po:Property ;
    aec3po:hasValue 3.2 ;
    qudt:hasUnit unit:M ;
    aec3po:hasComparator aec3po:CheckMethodComparisonOperator-eg .

ex:othersBaseOffset a aec3po:Property ;
    aec3po:hasValue 3.5 ;
    qudt:hasUnit unit:M ;
    aec3po:hasComparator aec3po:CheckMethodComparisonOperator-eg .

ex:partywall_distance a aec3po:Property ;
    aec3po:hasValue 1 ;
    qudt:hasUnit unit:M ;
    aec3po:hasComparator aec3po:CheckMethodComparisonOperator-ge .

ex:statement_54 aec3po:hasRequiredData ex:streeBaseOffset .
ex:statement_54 aec3po:hasRequiredData ex:othersBaseOffset .
ex:statement_63 aec3po:hasRequiredData ex:partywall_distance .


# Define and Instantiate all the CheckMethod(s) that will operationalize the Statement defined earlier. The assumption here is that microservices are handeling the "CheckAct".

ex:cantiliver_numericalCheckMethod_streetBaseOffset rdf:type aec3po:ProcedurialCheck ;
  aec3po:operationalizes ex:cantiliver_numericalCheckStatement_streetBaseOffset .
  #asText "The minimum free height of cantilevers over public spaces will be 3.20 metres for street with a width of 8.00 metres or less" ;

ex:cantiliver_numericalCheckMethod_otherBaseOffset  rdf:type aec3po:ProcedurialCheck ;
aec3po:operationalizes ex:cantiliver_numericalCheckStatement_otherBaseOffset .
    #asText "3.50 metres in all other cases." 

ex:cantiliver_numericalCheckMethod_partywall_distance  rdf:type aec3po:ProcedurialCheck ;
 aec3po:operationalizes  ex:cantiliver_numericalCheckStatement_partywall_distance .
#asText "All cantilever must be separated by at least 1 meter from the line of the partywall." 

# Option 2 for party wall distance check: assuming SHACL is used as a method. (Not final, need a link with operationalize and class Canteliver).
aec3po:cantiliver_SHACLCheckMethod_partywall_distance
	a sh:NodeShape ;
	sh:targetClass aec3po:canteliver ;    
	sh:property [                 
		sh:path aec3po:design_othersBaseOffset;           # constrains the values of design_othersBaseOffset
		sh:maxCount 1 ;
		sh:datatype xsd:float ;
		sh:maxInclusive 1 ;
	] .

# Instantiate the ORCheck for the baseOffset
ex:cantiliver_ORCheck_baseOffSet a aec3po:OrCheck ;
    aec3po:hasSubCheck ex:cantiliver_numericalCheckMethod_streetBaseOffset , ex:cantiliver_numericalCheckMethod_otherBaseOffset .

# Instantiate the AndCheck related to the two statements, one that checks the baseOffset and the other checks the distance to party wall
ex:cantiliver_AndCheck a aec3po:AndCheck ;
    aec3po:hasSubCheck ex:cantiliver_ORCheck_baseOffSet , ex:cantiliver_numericalCheckMethod_partywall_distance .

# Start describing the "real" Cantilever from the Spanich Demo Case 
# Define the design of the cantilever as a 3DModel
ex:cantilever_design a aec3po:Design ;
    rdf:type schema:3DModel .

# Define the design of the properties of the cantilever
ex:design_streeBaseOffset a aec3po:PropertyDesign ;
    aec3po:hasValue 4.5 ;
    qudt:hasUnit unit:M .
# I am assuming this represents 2 in the image.
   
ex:design_othersBaseOffset a aec3po:PropertyDesign ;
    aec3po:hasValue 2.6 ;
    qudt:hasUnit unit:M .
#I am assuming this represents 1 in the image.
   
ex:design_partywall_distance a aec3po:PropertyDesign ;
    aec3po:hasValue 1 ;
    qudt:hasUnit unit:M .

#Link all the properties design to the cantilever design using hasProperty property
ex:cantilever_design aec3po:hasProperty ex:design_streeBaseOffset .
ex:cantilever_design aec3po:hasProperty ex:design_othersBaseOffset .
ex:cantilever_design aec3po:hasProperty ex:design_partywall_distance .

# Link all the properties designs to the respective CheckMethods using forDesign property
ex:cantiliver_numericalCheckMethod_streetBaseOffset aec3po:forDesign ex:design_streeBaseOffset .
ex:cantiliver_numericalCheckMethod_otherBaseOffset aec3po:forDesign ex:design_othersBaseOffset .
ex:cantiliver_numericalCheckMethod_partywall_distance aec3po:forDesign ex:design_partywall_distance .

# Define the BuildingUsageType of the building from the Spanish Demo Case, which is a cultural center. Note: I have added aec3po:BuildingUsage-curltural to the skos hierarchy.
ex:cultural-center a aec3po:aec3po:BuildingUsage-curltural ;
    aec3po:forBuildingUsage ex:design_streeBaseOffset , ex:design_othersBaseOffset , ex:design_partywall_distance .

# Conduct the checking act and generate a compliance verification report. 
ex:cantiliver_checkingAct a aec3po:CheckingAct .

# Link the checkingAct to all the CheckMethods using usedMethod property
ex:cantiliver_checkingAct aec3po:usedMethod ex:cantiliver_numericalCheckMethod_streetBaseOffset , ex:cantiliver_numericalCheckMethod_otherBaseOffset , ex:cantiliver_numericalCheckMethod_partywall_distance .

# Instantiate the compliance verification report 
ex:cantiliver_ComplianceReport a aec3po:ComplianceReport ;
    aec3po:conforms true .

# Link the checkingAct to the compliance verification report using hasReport property
ex:cantiliver_checkingAct aec3po:hasReport ex:cantiliver_ComplianceReport .



