@prefix aec3po: <https://w3id.org/lbd/aec3po/> .
@prefix cc: <http://creativecommons.org/ns#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#> .
@prefix eli: <http://data.europa.eu/eli/ontology#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix quantitykind: <http://qudt.org/vocab/quantitykind/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ifcOWL: <https://standards.buildingsmart.org/IFC/DEV/IFC4/ADD2/OWL/index.html> .
@prefix ex: <http://example.com/exampleOntology#> .

# Instantiate the Finnish Accessibility Document as a Document
ex:Finnish_Accessibility_Doc a aec3po:Document ;
    dct:identifier <https://ym.fi/documents/1410903/35099218/Accessibility+of+Buildings.pdf/56f06cd3-4a27-6ee3-e553-e35731ffa70b/Accessibility+of+Buildings.pdf?t=1680607572789> ;
    dct:issued "2017-04-05"^^xsd:date ;
    dct:references <https://ym.fi/en/the-national-building-code-of-finland> ;
    dct:coverage aec3po:Finland .

# Instantiate the DocumentSubdivision that contains the Ramp example as a DocumentSubdivision
ex:Finnish_Accessibility_DocSubdivision_S2_SubS_2 a aec3po:DocumentSubdivision ;
    dct:identifier "Section 2" ;
    dct:title "Passageway leading to a building" .

# Link the DocumentSubdivision to the Document using hasPart property
ex:Finnish_Accessibility_Doc dct:hasPart ex:Finnish_Accessibility_DocSubdivision_S2_Sub_2 . 

# Instantiate the statement
ex:ramp_statement a aec3po:Statement ;
    aec3po:asText "The ramp referred to in subsection 1 above shall be easily noticeable and straight with a smooth, hard and non-slippery surface, width of at least 900 millimetres and, if the ramp is not connected to a fixed structure, a protective edge of at least 50 millimetres in height. There shall be a horizontal landing with a length of at least 1,500 millimetres at the lower and upper end of the ramp. The gradient of the ramp may not exceed five per cent. However, if the elevation difference is no more than 1,000 millimetres, the ramp may not have a gradient of more than eight per cent. In that case, the elevation difference of a continuous ramp may not be more than 500 millimetres, after which there shall be a horizontal intermediate landing with a length of at least 2,000 millimetres. However, in an outdoor area the ramp may have a gradient of more than five per cent only if it can be kept in a condition comparable with that of an indoor ramp. Provisions on railings, handrails and other arrangements intended to prevent falling down and misstepping are laid down by decree issued under section 117d, subsection 2 of the Land Use and Building Act." .

# Link the statement to the DocumentSubdivision using hasPart property
ex:Finnish_Accessibility_DocSubdivision_S2_Sub_2 dct:hasPart  ex:ramp_statement .

# Instantiate the ramp_humanEvaluatedCheckStatement_Noticeable as a subClassOf CheckStatement
ex:ramp_humanEvaluatedCheckStatement_Noticeable a aec3po:HumanEvaluatedCheckStatement ;
    rdf:type aec3po:CheckStatement .    

# Instantiate the ramp_humanEvaluatedCheckStatement_Surface as a subClassOf CheckStatement
ex:ramp_humanEvaluatedCheckStatement_Surface a aec3po:HumanEvaluatedCheckStatement ;
    rdf:type aec3po:CheckStatement .

# Instantiate the ramp_numericalCheckStatement_Width as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_Width a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .

# Instantiate the ramp_humanEvaluatedCheckStatement_FixedStructure as a subClassOf CheckStatement
ex:ramp_humanEvaluatedCheckStatement_FixedStructure a aec3po:HumanEvaluatedCheckStatement ;
    rdf:type aec3po:CheckStatement .

# Instantiate the ramp_humanEvaluatedCheckStatement_ProtectiveEdge as a subClassOf CheckStatement
ex:ramp_humanEvaluatedCheckStatement_ProtectiveEdge a aec3po:HumanEvaluatedCheckStatement ;
    rdf:type aec3po:CheckStatement .  

# Instantiate the ramp_numericalCheckStatement_LowerLandingLenght as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_LowerLandingLenght a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .     

# Instantiate the ramp_numericalCheckStatement_UpperLandingLenght as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_UpperLandingLenght a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .

# Instantiate the ramp_numericalCheckStatement_MaxGradient as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_MaxGradient a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .    

# Instantiate the ramp_numericalCheckStatement_LowerLandingElev as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_LowerLandingElev a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .   

# Instantiate the ramp_numericalCheckStatement_UpperLandingElev as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_UpperLandingElev a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .    

# Instantiate the ramp_numericalCheckStatement_IntLandingLenght as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_IntLandingLenght a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .   

# Instantiate the ramp_numericalCheckStatement_IntLandingElev as a subClassOf CheckStatement
ex:ramp_numericalCheckStatement_IntLandingElev a aec3po:NumericalCheckStatement ;
    rdf:type aec3po:CheckStatement .  

# Instantiate the ramp_humanEvaluatedCheckStatement_IndoorCondition as a subClassOf CheckStatement
ex:ramp_humanEvaluatedCheckStatement_IndoorCondition a aec3po:HumanEvaluatedCheckStatement ;
    rdf:type aec3po:CheckStatement . 


#-------Required Data informed by the Statement

# Instantiate the ramp as a FeatureOfInterest
ex:ramp a aec3po:FeatureOfInterest ;
    rdf:type ifcOWL:ifcRamp .

# Define the properties of the ramp and constraints based on the Statement
ex:rampNoticeable a aec3po:Property ;
    aec3po:hasValue "true"^^xsd:boolean .

ex:rampSurface a aec3po:Property ;
    aec3po:asText "straight with a smooth, hard and non-slippery surface" ;
    aec3po:hasValue "true"^^xsd:boolean .

ex:rampWidth a aec3po:Property ;
    aec3po:hasValue 900 ;
    aec3po:hasQuantityKind unit:MilliM ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-ge .

ex:rampFixedStructure a aec3po:Property ;
    aec3po:hasValue "false"^^xsd:boolean .
    
ex:rampProtectiveEdge a aec3po:Property ;
    aec3po:hasValue 50 ;
    aec3po:hasQuantityKind unit:MilliM ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-ge .

ex:rampLowerLandingLenght a aec3po:Property ;
    aec3po:hasValue 1500 ;
    aec3po:hasQuantityKind unit:MilliM ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-ge .  

ex:rampUpperLandingLenght a aec3po:Property ;
    aec3po:hasValue 1500 ;
    aec3po:hasQuantityKind unit:MilliM ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-ge .  

ex:rampMaxGradient a aec3po:Property ;
    aec3po:hasValue "5"^^xsd:decimal ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-le .   

ex:rampLowerLandingElev a aec3po:Property ;
    aec3po:hasValue 500 ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-le .          

ex:rampUpperLandingElev a aec3po:Property ;
    aec3po:hasValue 1000 ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-le .

ex:rampIntLandingLenght a aec3po:Property ;
    aec3po:hasValue 2000 ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-ge .

ex:rampIntLandingElev a aec3po:Property ;
    aec3po:hasValue 500 ;
    aec3po:hasComparisonOperator aec3po:ComparisonOperator-le . 

ex:rampIndoorCondition a aec3po:Property ;
    aec3po:hasValue "true"^^xsd:boolean .

ex:ramp_statement aec3po:hasRequiredData ( 
    ex:rampNoticeable 
    ex:rampSurface 
    ex:rampWidth 
    ex:rampFixedStructure 
    ex:rampProtectiveEdge 
    ex:rampLowerLandingLenght 
    ex:rampUpperLandingLenght 
    ex:rampMaxGradient 
    ex:rampLowerLandingElev 
    ex:rampUpperLandingElev 
    ex:rampIntLandingLenght 
    ex:rampIntLandingElev 
    ex:rampIndoorCondition 
) .  

# Define and Instantiate all the CheckMethod(s) that will operationalize the Statement defined above. The assumption here is that SWRL rules are handeling the "CheckAct".

ex:ramp_humanEvaluatedCheckMethod_Noticeable rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_humanEvaluatedCheckStatement_Noticeable . 

ex:ramp_humanEvaluatedCheckMethod_Surface rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_humanEvaluatedCheckStatement_Surface .   

ex:ramp_numericalCheckMethod_Width rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_Width . 

ex:ramp_humanEvaluatedCheckMethod_FixedStructure rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_humanEvaluatedCheckStatement_FixedStructure . 

ex:ramp_humanEvaluatedCheckMethod_ProtectiveEdge rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_humanEvaluatedCheckStatement_ProtectiveEdge .  

ex:ramp_numericalCheckMethod_LowerLandingLenght rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_LowerLandingLenght .  

ex:ramp_numericalCheckMethod_UpperLandingLenght rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_UpperLandingLenght .   

ex:ramp_numericalCheckMethod_MaxGradient rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_MaxGradient .  

ex:ramp_numericalCheckMethod_LowerLandingElev rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_LowerLandingElev . 

ex:ramp_numericalCheckMethod_UpperLandingElev rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_UpperLandingElev .   

ex:ramp_numericalCheckMethod_IntLandingLenght rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_IntLandingLenght .  

ex:ramp_numericalCheckMethod_IntLandingElev rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_numericalCheckStatement_IntLandingElev . 

ex:ramp_humanEvaluatedCheckMethod_IndoorCondition rdf:type aec3po:SWRLCheck ;
  aec3po:operationalizes ex:ramp_humanEvaluatedCheckStatement_IndoorCondition .  

# Instantiate the ORCheck for the Protective Edge
ex:ramp_ORCheck_ProtectiveEdge a aec3po:ORCheck ;
    aec3po:hasSubCheck (ex:ramp_humanEvaluatedCheckMethod_FixedStructure ex:ramp_humanEvaluatedCheckMethod_ProtectiveEdge) . 

# Instantiate the AndCheck for the Landing Length
ex:ramp_AndCheck_LandingLength a aec3po:AndCheck ;
    aec3po:hasSubCheck (ex:ramp_numericalCheckMethod_LowerLandingLenght ex:ramp_numericalCheckMethod_UpperLandingLenght) .  

# Instantiate the ORCheck for the Gradient
ex:ramp_ORCheck_Gradient a aec3po:ORCheck ;
    aec3po:hasSubCheck (ex:ramp_numericalCheckMethod_LowerLandingElev ex:ramp_numericalCheckMethod_UpperLandingElev ex:ramp_numericalCheckMethod_IntLandingLenght ex:ramp_numericalCheckMethod_IntLandingElev ex:ramp_humanEvaluatedCheckMethod_IndoorCondition)

# Instantiate the ChecklistStatement as a subClassOf Statement and link it to all the checks with the property hasSubCheck
ex:ramp_checklistStatement a aec3po:ChecklistStatement ;
    rdf:type aec3po:Statement .
    aec3po:hasSubCheck (ex:ramp_ORCheck_ProtectiveEdge ex:ramp_numericalCheckMethod_Width ex:ramp_AndCheck_LandingLength ex:ramp_numericalCheckMethod_MaxGradient ex:ramp_ORCheck_Gradient) .

